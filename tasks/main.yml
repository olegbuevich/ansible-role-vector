---

- name: Get installed version
  ansible.builtin.command: vector --version
  register: vector_version_output
  changed_when: false
  ignore_errors: true
  check_mode: false

- name: Set installed version
  when: vector_version_output.rc == 0
  ansible.builtin.set_fact:
    installed_vector_version: "{{ vector_version_output.stdout_lines[0].split(' ')[1] }}"

- name: Install
  when: vector_version_output.rc != 0 or installed_vector_version is version(vector_version, '<')
  ansible.builtin.include_tasks: "install-{{ ansible_os_family }}.yml"

- name: Create SSL certificates directory
  when: vector_ssl_certificates | length > 0
  ansible.builtin.file:
    path: "{{ vector_ssl_cert_dir }}"
    state: directory
    mode: "0700"
    owner: vector
    group: vector

- name: Provide SSL certificates
  when: vector_ssl_certificates | length > 0
  ansible.builtin.copy:
    content: "{{ item.value.content }}"
    dest: "{{ vector_ssl_cert_dir }}/{{ item.value.filename }}"
    owner: vector
    group: vector
    mode: "0400"
  with_items:
    - "{{ vector_ssl_certificates | dict2items }}"
  no_log: true
  notify:
    - Restart vector

- name: Provide config file
  ansible.builtin.template:
    src: vector.yaml.j2
    dest: "{{ vector_config_file }}"
    mode: "0400"
    owner: vector
    group: vector
    validate: vector validate --config-yaml %s
  notify:
    - Restart vector

- name: Set config file location
  ansible.builtin.lineinfile:
    path: /etc/default/vector
    regexp: '^VECTOR_CONFIG='
    line: "VECTOR_CONFIG={{ vector_config_file }}"
  notify:
    - Restart vector

- name: Ensure vector is started and enabled to start at boot
  ansible.builtin.service:
    name: vector
    daemon_reload: true
    state: started
    enabled: true
